#include <iostream>
#include <fstream>
#include <vector>
#include <iomanip>
#include <limits>

// Represents an item in our store's inventory
class Item {
private:
    int id;
    std::string name;
    double price;
    int quantity;
    std::string category;

public:
    Item(int id, std::string name, double price, int qty, std::string cat)
        : id(id), name(name), price(price), quantity(qty), category(cat) {}

    // Basic getters
    int getId() const { return id; }
    std::string getName() const { return name; }
    double getPrice() const { return price; }
    int getQuantity() const { return quantity; }
    std::string getCategory() const { return category; }

    // Let us change price or quantity if needed
    void setPrice(double p) { price = p; }
    void setQuantity(int q) { quantity = q; }
};

// Manages all the inventory logic
class InventoryManager {
private:
    std::vector<Item> items;
    std::string file = "inventory.txt";
    int nextId = 1;

public:
    InventoryManager() {
        loadFromFile();
    }

    bool addItem(std::string name, double price, int qty, std::string cat) {
        if (price < 0 || qty < 0)
            return false;

        Item newItem(nextId, name, price, qty, cat);
        items.push_back(newItem);
        nextId++;

        saveToFile();
        return true;
    }

    void showAllItems() {
        if (items.empty()) {
            std::cout << "No items in inventory right now.\n";
            return;
        }

        std::cout << std::left << std::setw(5) << "ID"
                  << std::setw(20) << "Name"
                  << std::setw(10) << "Price"
                  << std::setw(10) << "Qty"
                  << std::setw(15) << "Category" << "\n";

        std::cout << std::string(60, '-') << "\n";

        for (auto& item : items) {
            std::cout << std::left << std::setw(5) << item.getId()
                      << std::setw(20) << item.getName()
                      << "$" << std::fixed << std::setprecision(2) << std::setw(9) << item.getPrice()
                      << std::setw(10) << item.getQuantity()
                      << std::setw(15) << item.getCategory() << "\n";
        }
    }

    bool updatePrice(int id, double price) {
        if (price < 0) return false;

        for (auto& item : items) {
            if (item.getId() == id) {
                item.setPrice(price);
                saveToFile();
                return true;
            }
        }
        return false;
    }

    bool updateQty(int id, int qty) {
        if (qty < 0) return false;

        for (auto& item : items) {
            if (item.getId() == id) {
                item.setQuantity(qty);
                saveToFile();
                return true;
            }
        }
        return false;
    }

    bool deleteItem(int id) {
        for (auto it = items.begin(); it != items.end(); ++it) {
            if (it->getId() == id) {
                items.erase(it);
                saveToFile();
                return true;
            }
        }
        return false;
    }

    void searchItems(std::string term) {
        bool found = false;

        for (auto& item : items) {
            if (item.getName().find(term) != std::string::npos) {
                if (!found) {
                    std::cout << "Matching items:\n";
                    std::cout << std::string(60, '-') << "\n";
                    found = true;
                }

                std::cout << std::left << std::setw(5) << item.getId()
                          << std::setw(20) << item.getName()
                          << "$" << std::fixed << std::setprecision(2) << std::setw(9) << item.getPrice()
                          << std::setw(10) << item.getQuantity()
                          << std::setw(15) << item.getCategory() << "\n";
            }
        }

        if (!found) {
            std::cout << "No items found matching: " << term << "\n";
        }
    }

    void reportLowStock(int threshold) {
        bool foundAny = false;

        for (auto& item : items) {
            if (item.getQuantity() < threshold) {
                if (!foundAny) {
                    std::cout << "Low stock items (under " << threshold << "):\n";
                    std::cout << std::string(60, '-') << "\n";
                    foundAny = true;
                }

                std::cout << std::left << std::setw(5) << item.getId()
                          << std::setw(20) << item.getName()
                          << "$" << std::fixed << std::setprecision(2) << std::setw(9) << item.getPrice()
                          << std::setw(10) << item.getQuantity()
                          << std::setw(15) << item.getCategory() << "\n";
            }
        }

        if (!foundAny) {
            std::cout << "Everything looks well-stocked!\n";
        }
    }

    double getTotalValue() {
        double total = 0;

        for (auto& item : items) {
            total += item.getPrice() * item.getQuantity();
        }

        return total;
    }

private:
    void saveToFile() {
        std::ofstream fout(file);
        if (!fout) {
            std::cerr << "Couldn't open file for saving.\n";
            return;
        }

        fout << nextId << "\n";

        for (auto& item : items) {
            fout << item.getId() << "|"
                 << item.getName() << "|"
                 << item.getPrice() << "|"
                 << item.getQuantity() << "|"
                 << item.getCategory() << "\n";
        }

        fout.close();
    }

    void loadFromFile() {
        std::ifstream fin(file);
        if (!fin) {
            std::cout << "No previous inventory found. Starting fresh.\n";
            return;
        }

        items.clear();

        fin >> nextId;
        fin.ignore();

        std::string line;
        while (std::getline(fin, line)) {
            if (line.empty()) continue;

            int id, qty;
            std::string name, cat;
            double price;

            size_t pos = line.find('|');
            id = std::stoi(line.substr(0, pos));
            line.erase(0, pos + 1);

            pos = line.find('|');
            name = line.substr(0, pos);
            line.erase(0, pos + 1);

            pos = line.find('|');
            price = std::stod(line.substr(0, pos));
            line.erase(0, pos + 1);

            pos = line.find('|');
            qty = std::stoi(line.substr(0, pos));
            line.erase(0, pos + 1);

            cat = line;

            items.emplace_back(id, name, price, qty, cat);
        }

        fin.close();
    }
};

// Utility stuff
void clearScreen() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

void pressEnter() {
    std::cout << "\nPress Enter to continue...";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

int main() {
    InventoryManager inv;
    int choice;
    bool keepGoing = true;

    while (keepGoing) {
        clearScreen();
        std::cout << "=== INVENTORY MENU ===\n";
        std::cout << "1. View Items\n";
        std::cout << "2. Add Item\n";
        std::cout << "3. Change Price\n";
        std::cout << "4. Change Quantity\n";
        std::cout << "5. Remove Item\n";
        std::cout << "6. Search\n";
        std::cout << "7. Low Stock Report\n";
        std::cout << "8. Inventory Value\n";
        std::cout << "0. Exit\n";
        std::cout << "Pick an option: ";

        if (!(std::cin >> choice)) {
            std::cin.clear(); // Whoops, not a number
            std::cin.ignore(10000, '\n');
            std::cout << "Please enter a valid number.\n";
            pressEnter();
            continue;
        }

        std::cin.ignore(); // clear newline

        switch (choice) {
            case 1:
                clearScreen();
                inv.showAllItems();
                pressEnter();
                break;
            case 2: {
                clearScreen();
                std::string name, cat;
                double price;
                int qty;

                std::cout << "Item name: ";
                std::getline(std::cin, name);
                std::cout << "Price: $";
                std::cin >> price;
                std::cout << "Quantity: ";
                std::cin >> qty;
                std::cin.ignore(); // again for newline
                std::cout << "Category: ";
                std::getline(std::cin, cat);

                if (inv.addItem(name, price, qty, cat))
                    std::cout << "Item added!\n";
                else
                    std::cout << "Something went wrong. Check inputs.\n";

                pressEnter();
                break;
            }
            case 3: {
                clearScreen();
                inv.showAllItems();
                int id;
                double price;
                std::cout << "Item ID to update: ";
                std::cin >> id;
                std::cout << "New price: $";
                std::cin >> price;

                if (inv.updatePrice(id, price))
                    std::cout << "Price updated.\n";
                else
                    std::cout << "Update failed. Check ID or value.\n";

                pressEnter();
                break;
            }
            case 4: {
                clearScreen();
                inv.showAllItems();
                int id, qty;
                std::cout << "Item ID to update: ";
                std::cin >> id;
                std::cout << "New quantity: ";
                std::cin >> qty;

                if (inv.updateQty(id, qty))
                    std::cout << "Quantity updated.\n";
                else
                    std::cout << "Failed. ID not found or bad input.\n";

                pressEnter();
                break;
            }
            case 5: {
                clearScreen();
                inv.showAllItems();
                int id;
                std::cout << "Item ID to remove: ";
                std::cin >> id;

                if (inv.deleteItem(id))
                    std::cout << "Item removed.\n";
                else
                    std::cout << "Couldn’t find that item.\n";

                pressEnter();
                break;
            }
            case 6: {
                clearScreen();
                std::string term;
                std::cout << "Search term: ";
                std::getline(std::cin, term);
                inv.searchItems(term);
                pressEnter();
                break;
            }
            case 7: {
                clearScreen();
                int limit;
                std::cout << "Enter low stock threshold: ";
                std::cin >> limit;
                inv.reportLowStock(limit);
                pressEnter();
                break;
            }
            case 8:
                clearScreen();
                std::cout << "Total inventory value: $"
                          << std::fixed << std::setprecision(2)
                          << inv.getTotalValue() << "\n";
                pressEnter();
                break;
            case 0:
                std::cout << "See ya!\n";
                keepGoing = false;
                break;
            default:
                std::cout << "That’s not a valid option.\n";
                pressEnter();
                break;
        }
    }

    return 0;
}
